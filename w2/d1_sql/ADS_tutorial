select count(*) from orders;
select min(orderdate) from orders;
select max(orderdate) from orders;

-- 
DROP TABLE if exists end_obs_dates;
CREATE TABLE end_obs_dates 
AS

-- Recursive query example (something like FOR loop for SQL)
WITH RECURSIVE
  cnt(x) AS (
     SELECT 0
     UNION ALL
     SELECT x+1 FROM cnt
      LIMIT (SELECT ROUND(((julianday('1998-06-01') - julianday('1996-08-01'))/30) + 1)) -- this counts number of months between these two days
  )
SELECT date('1996-08-01', '+' || x || ' month') as end_obs_date FROM cnt;

-- ------------------ create ADS POPULATION HIST(each customer id for each month). We will use table customers for this


DROP TABLE if exists ads_population_hist;

CREATE TABLE ads_population_hist 
AS
SELECT A.*,
       B.*
FROM end_obs_dates AS A
CROSS JOIN (SELECT DISTINCT customerid FROM customers) AS B
;



-- ----------------------- SEE how table looks

select * from ads_population_hist limit 10;

-- compute additional attribute totalprice_for_product as unitprice * quantity 

SELECT *,
       unitprice*quantity AS totalprice_for_product
FROM "Order Details" LIMIT 20

-- It is important that in our summary, every order_id is only once.

SELECT A.orderid,
     COUNT(DISTINCT A.productid) AS no_of_distinct_products,
     SUM(A.quantity) AS no_of_items,
     SUM(A.totalprice_for_product) AS total_price 
     FROM (SELECT *,
                  unitprice*quantity AS totalprice_for_product
           FROM "Order Details") AS A
GROUP BY 1;

-- We have aggregated information for every orderid. Now, we need to assign it to the correct customer and correct month. we will use table orders for that.

SELECT 
    orderid,
    customerid,
    orderdate
FROM orders 
LIMIT 100;

-- We need to assign end_obs_date to each order.

SELECT orderid,
       customerid,
       orderdate,
       date(orderdate,'start of month','+1 month') as end_obs_date
FROM orders LIMIT 100;

-- Now, we will combine previous steps into 1 table called ads_orders_hist.

DROP TABLE if exists ads_orders_hist;

CREATE TABLE ads_orders_hist 
AS
SELECT A.orderid,
       A.customerid,
       A.end_obs_date,
       B.no_of_distinct_products,
       B.no_of_items,
       B.total_price
FROM (
    SELECT orderid,
             customerid,
             orderdate,
             date(orderdate,'start of month','+1 month') as end_obs_date
    FROM orders)
AS A
LEFT OUTER JOIN (
    SELECT A.orderid,
         COUNT(DISTINCT A.productid) AS no_of_distinct_products,
         SUM(A.quantity) AS no_of_items,
         SUM(A.totalprice_for_product) AS total_price
    FROM (
        SELECT *,
            unitprice*quantity AS totalprice_for_product
        FROM "Order Details") 
    AS A
    GROUP BY 1) 
AS B 
ON A.orderid = B.orderid;



-- It is important to test that every orderid is only once in the table.

select orderid
    ,count(*)
from ads_orders_hist
group by 1
order by 2 desc
limit 5
;

-- If the first line is 1 then we are good to go to the next step.
-- The last step is to join ads_orders_hist with ads_pop_hist. We will join everything on columns customerid and end_obs_date. We will use left join because we want to keep also track of the clients who didn't buy anything in the specific month.

drop table if exists ads_observation_hist;
create table ads_observation_hist as
select 
    A.*
    -- we can replace missings with 0 because it means there were no orders for this client during specific month.
    ,coalesce(B.no_of_distinct_orders_1M, 0) as no_of_distinct_orders_1M
    ,coalesce(B.no_of_items_1M, 0) as no_of_items_1M
    ,coalesce(B.total_price_1M, 0) as total_price_1M
from ads_population_hist as A
left outer join (
    -- we need to group by our orders to customer level
    select customerid
        ,end_obs_date
        ,count(distinct orderid) as no_of_distinct_orders_1M
        ,sum(no_of_items) as no_of_items_1M
        ,sum(total_price) as total_price_1M
    from ads_orders_hist
    group by 1,2
) as B
on A.customerid = B.customerid
  and A.end_obs_date = B.end_obs_date
;

-- It is important to test again if every customerid is in the table only once for every month.
select customerid
    ,end_obs_date
    ,count(*)
from ads_observation_hist
group by 1,2
order by 3 desc
limit 5
;

-- 
select * from ads_observation_hist limit 10;

-- We can create many more variables that could be useful for modeling and further analysis, for example, max_price, min_price, avg_price etc.

-- Once new data from the next month come in, we can simply add them to these tables using where clause for orderdate and INSERT INTO statements.